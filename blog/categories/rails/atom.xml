<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Caner's Ruby on rails blog]]></title>
  <link href="http://canercak.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://canercak.github.io/"/>
  <updated>2014-04-15T01:42:02+03:00</updated>
  <id>http://canercak.github.io/</id>
  <author>
    <name><![CDATA[Caner]]></name>
    <email><![CDATA[canercak@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Forget About Carrierwave and Paperclip]]></title>
    <link href="http://canercak.github.io/blog/2014/04/15/forget-about-carrierwave-and-paperclip/"/>
    <updated>2014-04-15T00:21:48+03:00</updated>
    <id>http://canercak.github.io/blog/2014/04/15/forget-about-carrierwave-and-paperclip</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s post is about lovable transloadit. What is transloadit and why it is lovable? Well,
if you have anything to upload then transloadit sorts out the processing, encoding
and bandwidth that your server may face with and this is just the start. Say you have videos;
transloadit uploads, processes, encodes, crops, watermarks, exports, etc.
Same for images, sounds, pdfs, rars and almost all. So you don&rsquo;t have to use gems,
create an uploader classes, gridfs storages and lock your heroku dynos on upload times.
It does all and provides you the link of the file. Yes it&rsquo;s paid(like 20$ a month) but when you compare it
with your server costs and the hassle of dealing with files it will definetely be cheaper.</p>

<p>I had to create a system where user uploads videos and admin controls them.
It&rsquo;s actually more complicated than that but knowing it will give you an idea.
I used transloadit with jasny file uploader and flowplayer to make it happen.</p>

<p>We start with creating a template file on transloadit website. You just start with their free plan.
Here is my template that I created on their wesite. I&rsquo;m encoidng iphone videos,taking out 25 thumbnails out
of every video and exporting them to our s3 bucket.</p>

<p>``` json transloadit template</p>

<p>{
  &ldquo;steps&rdquo;: {</p>

<pre><code>"iphone_video": {
  "use": ":original",
  "robot": "/video/encode",
  "preset": "iphone",
  "ffmpeg": {
    "b": "120000K"
  }
},
"thumbnails": {
  "use": ":original",
  "robot": "/video/thumbs",
  "count": 25,
  "width": 250,
  "height": 250
},
"export": {
  "robot": "/s3/store",
  "use": [
    "iphone_video",
    "thumbnails"
  ],
  "key": "xxxxx",
  "secret": "yyyyyy",
  "bucket": "zzzzzz"
}
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>transloadit gem  provides the necessary integration with Rails so I use it rather than the js library.</p>

<p>``` ruby Gemfile</p>

<p>gem &lsquo;transloadit-rails&rsquo;</p>

<p>```</p>

<p>The gem creates a yml file where we store our template details.
The details can be found on transloadit website dashboard.</p>

<p>``` ruby config/transloadit.yml</p>

<p>development:
  jquery_sdk_version: &lsquo;latest&rsquo;
  auth:</p>

<pre><code>key     : 'wwww'
secret  : 'ssssss'
duration: 1800 
max_size: 52428800
</code></pre>

<p>  templates:</p>

<pre><code>video_encode: "xxxxxxxxxxxxxx"
</code></pre>

<p>production:
  jquery_sdk_version: &lsquo;latest&rsquo;
  auth:</p>

<pre><code>key     : 'wwww'
secret  : 'ssssss'
duration: 1800 
max_size: 52428800
</code></pre>

<p>  templates:</p>

<pre><code>video_encode: "xxxxxxxxxxxxxx"
</code></pre>

<p>```</p>

<p>This is my form to upload files. Each apr has one jasny uploader.
I intentionaly don&rsquo;t do multiple uploads here since the feature is making user upload one by one.
Check how I place necessary transloadit codes. First refers to transloadit.yml and second refers to
transloadit jquery uploader. Once the user selects the file, the form submits(triggeronselection =>true)
and upload starts so you will see a progress bar(modal=>true). &ldquo;wait=>true&rdquo; means that I want transloadit to
process the files after the upload finishes. Once its false it will just upload the file and queue the processing
on their server so you can use hooks to get processed files.</p>

<p>``` haml views/aprs/_form.html.haml</p>

<h1>update_container</h1>

<ul>
<li>if @aprs.present?

<ul>
<li>@aprs.each_with_index do |apr,index| <br/>
= bootstrap_form_for apr, :remote => true, html: { :id => &ldquo;showapr#{apr.id}&rdquo; , class: &lsquo;form-horizontal&rsquo; } do |f|
  = f.error_messages
  = hidden_field_tag :eventid, apr.event.id
  = transloadit :video_encode
  .fileupload.fileupload-new.pull-left{style: &ldquo;padding-right: 5px;&rdquo;, &ldquo;data-provides&rdquo; => &ldquo;fileupload&rdquo; }
    .fileupload-new.thumbnail{:style => &ldquo;width: 130px; height: 130px;&rdquo;}

<pre><code>  - if apr.upload.present?
    - if apr.upload["thumbs"].present?                
      %img{ :src =&gt; apr.upload["thumbs"][0]}/
- if apr.event.app.check_user_failed == false &amp;&amp; (apr.event.start_time.day == Time.zone.now.day) 
  .fileupload-preview.fileupload-exists.thumbnail{:style =&gt; "width: 130px; height: 130px;"}
  %div
    %span.btn.btn-file
      %span.fileupload-new{:id =&gt; "selectbutton"}
        =t('select_video')              
      %span.fileupload-exists
        =t('select_video')   
      =f.file_field "upload#{apr.id}" , accept: 'video/flv,video/avi,video/mov,video/mp4,video/mpg,video/wmv,video/3gp,video/asf,video/rm,video/swf',  :data =&gt; {:max_file_size =&gt; 30.megabytes}
  = transloadit_jquerify "showapr#{apr.id}", :wait =&gt; true, :modal=&gt;true, triggerUploadOnFileSelection: true
</code></pre>

<p>-else
= label_tag :error_label, &ldquo;time doesn&rsquo;t fit to update time&rdquo;, class: &lsquo;control-label&rsquo;</p></li>
</ul>
</li>
</ul>


<p>```</p>

<p>Here is my controller. I include the ParamsDecoder to make encoding work. Once the upload finishes you will get a
long json (params[:transloadit]). It has almost every details you can find about the uploaded files.</p>

<p>``` ruby controllers/aprs_controller.rb</p>

<p>class AprsController &lt; ApplicationController
  include Transloadit::Rails::ParamsDecoder
  include AprsHelper</p>

<p>  respond_to :html, :json</p>

<p>  def update</p>

<pre><code>app = App.where('events._id' =&gt; Moped::BSON::ObjectId(params[:eventid])).first
unless  app.check_user_failed == true
  event = app.events.detect { |pr| pr.id.to_s == params[:eventid] }
  apr = event.aprs.detect { |pr| pr.id.to_s == params[:id] } 
  isvalid = check_video_validity(params[:transloadit], event)
  if isvalid == true
    videos = transloadit_file_uploads(params[:transloadit], apr.upload)
    if videos.present?
      apr.upload = videos 
    else
      flash.now[:error] = "You've already uploaded a video"
      return
    end    
    if apr.save  
      blank = event.aprs.map{|evt| evt.upload; evt.upload.blank?}
      unless blank.include? true
        event.status = 4
        event.save
      end
      respond_to do |format| 
        @aprs = event.aprs 
        format.js     
      end
    end
  else
     flash.now[:error] = "Time of upload is out of event times"
     respond_to do |format| 
      @aprs = nil
      format.js     
    end
  end
else
  flash.now[:error] = "user failed"   
end
</code></pre>

<p>  end</p>

<p>```</p>

<p>This is special for my case. As you see I compare the metadata of the video I get from transloadit params.
We assume that all uploaded videos have create dates. All videos coming from phones and electronic devices have them.
I compare create date of the video and upload time with the event times.
So transloadit enables me to check if the video has uploaded between specific times(start-end times of an event).</p>

<p>``` ruby helpers/aprs_helper.rb</p>

<p> def check_video_validity(params, event)</p>

<pre><code>check_hourly(params, event)
</code></pre>

<p>  end</p>

<p>  def check_hourly(params, event)</p>

<pre><code>date_created = params[:uploads][0][:meta][:date_file_created]
start_time = event.start_time.in_time_zone
end_time = event.end_time.in_time_zone
upload_time =Time.parse(params[:last_job_completed]).in_time_zone
valid = false  
if date_created.present?  
  if (date_created &gt;= start_time &amp;&amp; date_created &lt;= end_time) &amp;&amp;
     (upload_time &gt;= start_time &amp;&amp; upload_time &lt;= end_time) 
    valid = true
  end
end
return valid
</code></pre>

<p>  end
```</p>

<p>Here is how I store the links on mongodb. &ldquo;upload&rdquo; is a mongoid hash field and things will be stored here.</p>

<p>``` ruby helpers/aprs_helper.rb</p>

<p>def transloadit_file_uploads(params, upload)</p>

<pre><code>if (params[:results][:thumbnails].blank?)
  return nil
end
if upload == nil 
  upload= Hash.new {|h,k| h[k]=[]}   
end 

upload[:video] = params[:results][:iphone_video].first[:url]
upload["thumbs"] = []    
params[:results][:thumbnails].each do |thumb|         
    upload["thumbs"] &lt;&lt; thumb[:url]
end 
return upload
</code></pre>

<p>  end</p>

<p>```</p>

<p>So after the links get saved its time to show the videos with flowplayer.
I have a partial with video, thumbnail carousel and accept-reject buttons in it.
By the way if you discover owl-carousel you won&rsquo;t be using bootstrap carousel anymore.
I won&rsquo;t go into detail of jquery partial updates, carousel and flowplayer integration since this post is about transloadit.
Check their websites for more information. I had to use coffescript inline because of variables used in partials. You can take out the js parts outside for sure.</p>

<p>``` ruby admin/events/_show_adminevent.html.haml</p>

<h1>update_container</h1>

<p>  .row</p>

<pre><code>.span8
  - if @aprs.present?
    - @aprs.each_with_index do |apr,index| 
      = bootstrap_form_for apr,:remote =&gt; true, :url =&gt; admin_apr_path(apr.id) ,html: {:method =&gt; :put,  class: 'form-horizontal' } do |f|
        = f.error_messages
        %legend Set #{index+1}
        %fieldset
          .control-group
            = label_tag :videos, t('.videos'), class: 'control-label'
            .controls               
              - if apr.upload.present?
                .span8
                  .player{"data-ratio" =&gt;"0.417", :id=&gt;"player_#{index}", :style=&gt;"background:#777 url(#{apr.upload["thumbs"].first}) no-repeat center;  background-size: cover;"}
                    :coffee
                      $("#player_#{index}").flowplayer
                        ratio: 3/4
                        splash: true
                        rtmp: "rtmp://s3b78u0kbtx79q.cloudfront.net/cfx/st"
                        playlist: [[mp4: "#{ apr.upload["video"]}"]]
                      return
          =hidden_field_tag "eventid", apr.event.id
          .control-group
            = label_tag :thumbnails, t('.thumbnails'), class: 'control-label'
            .controls
              - if apr.upload.present?
                .span8
                  .owl-demo.owl-carousel{:id=&gt;"thumbnails_#{index}"}
                    - apr.upload["thumbs"].each_with_index do |thumb, index|
                      .item
                        %img.lazyOwl{alt: "",width:250, height:250, "data-src" =&gt; "#{thumb}"}/  
                    :coffee
                      $("#thumbnails_#{index}").owlCarousel
                        items: 5
                        lazyLoad: true
                        navigation: true
          .control-group
            = label_tag :confirmation, t('.confirmation'), class: 'control-label'
            .controls
              - if apr.upload.present?
                - if  apr.confirmations.find_by(:confirmed_user=&gt; current_user.id).present?
                  - if  apr.confirmations.find_by(:confirmed_user=&gt; current_user.id).confirmed == true
                    = f.submit "Accepted", name: "accept", class: 'btn btn-success' 
                    = f.submit "Reject", class: 'btn' , data: { confirm: "Are you sure?" }
</code></pre>

<p>```</p>

<p>Here we go. Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Login System Out of Omniauth-identity With Mongoid and Jquery Validations]]></title>
    <link href="http://canercak.github.io/blog/2014/02/09/using-omniauth-identity-with-jquery-clientside-validations/"/>
    <updated>2014-02-09T12:30:10+02:00</updated>
    <id>http://canercak.github.io/blog/2014/02/09/using-omniauth-identity-with-jquery-clientside-validations</id>
    <content type="html"><![CDATA[<p>I want to start this post with one definite sentence.
Don&rsquo;t use omniauth-identity!
Why? Because it doesn&rsquo;t cover the &ldquo;details&rdquo; of a login system. And for a login system details are absolutely necesssary. It does make the user register and sign-in
but thats all. No forms, no password resets, no emails, no decent validations, etc. It&rsquo;s really simple and that simplicity won&rsquo;t help you. And the worst thing is it&rsquo;s hard to customise.
You have that initialiser file and you don&rsquo;t understand what you do in there. There are also no resources other than Ryan&rsquo;s Railscast and couple of blog posts.
The reason I&rsquo;m writing this blog post is because there may be people still wan&rsquo;t to use it as I do.
I&rsquo;ve lost considerable amount of time dealing with it&rsquo;s login fail bug,
integrating it and making a decent login system out of it and now after all that time
I don&rsquo;t want to deal with login systems at all.</p>

<p>So we start with adding the gem</p>

<p>``` ruby Gemfile
gem &ldquo;omniauth&rdquo;
gem &lsquo;omniauth-identity&rsquo;</p>

<p>```
And we have this initialiser file also used in other omniauth providers. That line fixes the bug..</p>

<p>``` ruby config/initialisers/omniauth.rb</p>

<p>OmniAuth.config.on_failure = Proc.new { |env|
  OmniAuth::FailureEndpoint.new(env).redirect_to_failure
}
end</p>

<p>```</p>

<p>The we create the modal and yes it doesn&rsquo;t directly integrate with
your user model(or I didn&rsquo;t lost time trying to do it).
You will have a seperate mongoid collection and it will store identities</p>

<p>``` ruby models/identity.rb</p>

<p>class Identity
  include Mongoid::Document
  include OmniAuth::Identity::Models::Mongoid</p>

<p>  field :email, type: String
  field :name, type: String
  field :password_digest, type: String
  field :username, type: String</p>

<p>  belongs_to :user
  validates_presence_of :name
  validate :uniqueness_of_email
  validates_format_of :email, :with => /^[-a-z0-9_+.]+\@([-a-z0-9]+.)+[a-z0-9]{2,4}$/i</p>

<p>  def uniqueness_of_email</p>

<pre><code>self.errors.add(:email, "email is already in use") unless User.find_by(email:email).nil? 
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>I have authentication file in models directory that also manages omniauth facebook so after saving the identity
don&rsquo;t forget to save the user too. I&rsquo;m setting user&rsquo;s provider as &ldquo;identity&rdquo;, since I only get name and email I had to set uid as username.</p>

<p>``` ruby models/concerns/user/authentication.rb</p>

<p>  def from_omniauth(auth)</p>

<pre><code>      binding.pry

      user = where(auth.slice(:provider, :uid)).first_or_initialize
      return nil if user.new_record? &amp;&amp; !user.has_access?
        user.provider = auth.provider
        user.uid = auth.uid
        user.email = auth.email
        user.username = auth.uid
        user.set_fields_from_omniauth auth
        user.login_count = user.login_count+ 1
        user.save!
      if user.login_count == 1
        UserMailer.welcome_email(self.first).deliver 
      end
      user

    end
</code></pre>

<p>```</p>

<p>Controller only has new method.  Taken from Ryan&rsquo;s railcast.</p>

<p>``` ruby controllers/identities_controller.rb</p>

<p> class IdentitiesController &lt; ApplicationController</p>

<p>def new
  @identity = env[&lsquo;omniauth.identity&rsquo;]
  @user =User.new
end</p>

<p>```
sessions controller as usual</p>

<p>``` ruby controllers/sessions_controller.rb</p>

<p>class SessionsController &lt; ApplicationController</p>

<p>  skip_before_filter :require_login, except: [:destroy]</p>

<p>  def create</p>

<pre><code>if (user = User.from_omniauth env['omniauth.auth'])
  session[:user_id] = user.id.to_s 
  redirect_to session.delete(:redirect_to) || new_quote_path
else
  redirect_to root_path, flash: { error: t(APP_CONFIG.facebook.restricted_group_id ? 'flash.sessions.error.restricted' : 'flash.sessions.error.create') }
end
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>session[:user_id] = nil
redirect_to root_path
</code></pre>

<p>  end
  def failure</p>

<pre><code>redirect_to root_path, flash: { error: t(APP_CONFIG.facebook.restricted_group_id ? 'flash.sessions.error.restricted' : 'flash.sessions.error.create') }
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>I use modals to show forms</p>

<p>``` haml views/pages/home.html.haml</p>

<pre><code>%big.inline-block.new-identity= link_to t('register_now'), '#new-identity', data: { toggle: 'modal' }
%big.inline-block.new-identity veya
%big.inline-block.login-identity= link_to t('login_now'), '#login-identity', data: { toggle: 'modal' }
</code></pre>

<p>```</p>

<p>``` haml views/shared/_modal_login_identity.html.haml</p>

<h1>login-identity.modal.hide.fade{ tabindex: -1, role: &lsquo;dialog&rsquo;, &lsquo;aria-labelledby&rsquo; => t(&lsquo;login_identity&rsquo;), &lsquo;aria-hidden&rsquo; => true }</h1>

<p>  .modal-header</p>

<pre><code>%button.close{ type: 'button', data: { dismiss: 'modal' }, 'aria-hidden' =&gt; true } &amp;times;
%h3= t('shared.navbar.login_identity')
</code></pre>

<p>  .modal-body</p>

<pre><code>= render 'identities/login'
</code></pre>

<p>  .modal-footer</p>

<pre><code>= link_to t('close'), '#', 'aria-hidden' =&gt; true, data: { dismiss: 'modal' }, class: 'btn'
</code></pre>

<p>```</p>

<p>``` haml views/shared/_modal_new_identity.html.haml</p>

<h1>new-identity.modal.hide.fade{ tabindex: -1, role: &lsquo;dialog&rsquo;, &lsquo;aria-labelledby&rsquo; => t(&lsquo;new_identity&rsquo;), &lsquo;aria-hidden&rsquo; => true }</h1>

<p>  .modal-header</p>

<pre><code>%button.close{ type: 'button', data: { dismiss: 'modal' }, 'aria-hidden' =&gt; true } &amp;times;
%h3= t('shared.navbar.new_identity')
</code></pre>

<p>  .modal-body</p>

<pre><code>=render 'identities/register'
</code></pre>

<p>  .modal-footer</p>

<pre><code>= link_to t('close'), '#', 'aria-hidden' =&gt; true, data: { dismiss: 'modal' }, class: 'btn'
</code></pre>

<p>```</p>

<p>``` ruby views/identities/_login.rb</p>

<p>=form_tag(&lsquo;/auth/identity/callback&rsquo;,  :method => &lsquo;post&rsquo;, :id => &lsquo;actual-login-form&rsquo;) do
  = label_tag :login_error, t(&ldquo;shared.navbar.wrong_password&rdquo;), class: &lsquo;control-label&rsquo;, id: &lsquo;error_code_label_login&rsquo;
  .field</p>

<pre><code>= label_tag :auth_key,t('shared.navbar.email')
= text_field_tag :auth_key, nil 
</code></pre>

<p>  .field</p>

<pre><code>= label_tag :password, t('shared.navbar.password')
= password_field_tag :password, nil
</code></pre>

<p>  .actions</p>

<pre><code>= submit_tag t('shared.navbar.login'), id: "login_submit", class: 'btn btn-primary', disable_with: t('helpers.disable_with')
</code></pre>

<p>  %br</p>

<pre><code>= link_to t('shared.navbar.forgot_password'), new_password_reset_path
</code></pre>

<ul>
<li>if flash[:error] == I18n.t(&ldquo;shared.navbar.wrong_password&rdquo;)
:coffee
  $(document).on &lsquo;ready&rsquo;, &ndash;>
    $(&ldquo;#login-identity&rdquo;).modal &ldquo;show&rdquo;
    $(&ldquo;#error_code_label_login&rdquo;).show()
    $(&ldquo;#password&rdquo;).focus()</li>
</ul>


<p>```</p>

<p>``` ruby views/identities/_register.rb</p>

<p>= form_tag &ldquo;/auth/identity/register&rdquo;, id: &lsquo;signupForm&rsquo; do
  &ndash; if @identity &amp;&amp; @identity.errors.any?</p>

<pre><code>.error_messages
  %h2
    = pluralize(@identity.errors.count, "error")
    prohibited this account from being saved:
  %ul
    - @identity.errors.full_messages.each do |msg|
      %li= msg
</code></pre>

<p>  .field</p>

<pre><code>= label_tag :name, t('shared.navbar.name')
= text_field_tag :name, @identity.try(:name)
</code></pre>

<p>  .field</p>

<pre><code>= label_tag :email,t('shared.navbar.email')
= text_field_tag :email, @identity.try(:email)
</code></pre>

<p>  .field</p>

<pre><code>= label_tag :password, t('shared.navbar.password')
= password_field_tag :password
</code></pre>

<p>  .field</p>

<pre><code>= label_tag :password_confirmation,t('shared.navbar.password_again')
= password_field_tag :password_confirmation
</code></pre>

<p>  = submit_tag t(&lsquo;shared.navbar.register&rsquo;), class: &lsquo;btn btn-primary&rsquo;, disable_with: t(&lsquo;helpers.disable_with&rsquo;)</p>

<p>```</p>

<p>I use jquery validation which I love</p>

<p>``` coffeescript pages.js.coffee</p>

<p>$(document).on &lsquo;ready&rsquo;, &ndash;></p>

<p>  $(&ldquo;#signupForm&rdquo;).validate</p>

<pre><code>errorClass: "error_class"
validClass: "valid_class"
rules:
  name: 
    required: true
  email:
    required: true
    email: true
    remote: "/users/check_email" 
  password:
    required: true
    minlength: 5 
  password_confirmation:
    required: true
    minlength: 5
    equalTo: "#password" 
messages:
  name: I18n.t "signup.name.required"  
  password:
    required: I18n.t "signup.name"  
    minlength: I18n.t "signup.password.minlength"  
  password_confirmation:
    required: I18n.t "signup.password_confirmation.required" 
    minlength: I18n.t "signup.password_confirmation.minlength" 
    equalTo: I18n.t "signup.password_confirmation.equalTo" 
  email:
    required: I18n.t "signup.email.required" 
    email: I18n.t "signup.email.email" 
    remote: I18n.t "signup.email.remote" 
</code></pre>

<p>  $(&ldquo;#actual-login-form&rdquo;).validate</p>

<pre><code>errorClass: "error_class"
validClass: "valid_class"
rules:
  email:
    required: true
    email: true
  password:
    required: true
messages:
  password:
    required: I18n.t "signup.name"  
  email:
    required: I18n.t "signup.email.required" 
    email: I18n.t "signup.email.email" 
</code></pre>

<p>```</p>

<p>``` ruby controllers/users_controller/check_email.rb</p>

<p>  def check_email</p>

<pre><code>@user = User.find_by(email: params[:email])
respond_to do |format|
 format.json { render :json =&gt; !@user }
end
</code></pre>

<p>  end</p>

<p>```</p>

<p>My password reset codes</p>

<p>``` ruby controllers/password_resets_controller.rb</p>

<p>class PasswordResetsController &lt; ApplicationController
  def new
  end</p>

<p>  def create</p>

<pre><code>user = User.find_by(email: params[:email])
user.send_password_reset(user)
redirect_to root_url, :notice =&gt; I18n.t("password_resets.email_sent")
</code></pre>

<p>  end</p>

<p>  def edit</p>

<pre><code>@user = User.find_by(password_reset_token: params[:id])
</code></pre>

<p>  end</p>

<p>  def update</p>

<pre><code>@user = User.find_by(password_reset_token: params[:id])
if @user.password_reset_sent_at &lt; 2.hours.ago
  redirect_to new_password_reset_path, :alert =&gt; I18n.t("password_resets.expired")
else
  @user.update_attributes(permitted_params.user)
  @identity = Identity.find_by email: @user.email 
  @identity.password = @user.password
  @identity.password_confirmation = @user.password_confirmation
  if @identity.save        
    redirect_to root_url, :notice =&gt; I18n.t("password_resets.password_has_been_reset")
  else
    redirect_to root_url, :notice =&gt; I18n.t("password_resets.error_in_password_reset")
  end          
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>``` ruby views/password_resets/new.html.haml</p>

<p>= form_tag password_resets_path, :method => :post do
  .field</p>

<pre><code>= label_tag :email, t('shared.navbar.email')
= text_field_tag :email, params[:email]
</code></pre>

<p>  = submit_tag t(&lsquo;shared.navbar.reset_password&rsquo;),  class: &lsquo;btn btn-primary&rsquo;, disable_with: t(&lsquo;helpers.disable_with&rsquo;)</p>

<p>```</p>

<p>``` ruby views/password_resets/edit.html.haml</p>

<p>= form_for @user, :url => password_reset_path(params[:id]) do |f|
  &ndash; if @user.errors.any?</p>

<pre><code>.error_messages
  %h2 Form is invalid
  %ul
    - for message in @user.errors.full_messages
      %li= message
</code></pre>

<p>  .field</p>

<pre><code>= f.label :password
= f.password_field :password
</code></pre>

<p>  .field</p>

<pre><code>= f.label :password_confirmation
= f.password_field :password_confirmation
</code></pre>

<p>  .actions= f.submit &ldquo;Update Password&rdquo;</p>

<p>```</p>

<p>Mailers</p>

<p>``` ruby app/mailers/password_resets_mailer.rb</p>

<p>  def password_reset_email(user)</p>

<pre><code>@user = user
binding.pry
mail(to: user["email"], subject: t('user_mailer.pass_reset.subject'))
</code></pre>

<p>  end
```</p>

<p>and the actual mail which I&rsquo;ve only paste the relevant part</p>

<p>``` haml app/views/mailers/password_reset.html.haml</p>

<p> #href: &ldquo;#{edit_password_reset_url(@user.password_reset_token)}&rdquo;}=t(&ldquo;.pass_reset_link_button&rdquo;)</p>

<p>```</p>

<p>So it works. At least omniauth-identity has tests..I really could not do test-driven with it  so I&rsquo;ll add the tests soon..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuously Collecting User Facebook Data for Mongoid Application Using Omniauth, Facebook, Koala and Resque]]></title>
    <link href="http://canercak.github.io/blog/2014/02/03/collecting-user-data-to-mongoid-application-using-omniauth-facebook-and-koala/"/>
    <updated>2014-02-03T22:37:12+02:00</updated>
    <id>http://canercak.github.io/blog/2014/02/03/collecting-user-data-to-mongoid-application-using-omniauth-facebook-and-koala</id>
    <content type="html"><![CDATA[<p>Data is the key to long-lasting relationship with users. The more, the better. Once we have relevant data;
we can target marketing, develop features tailored to specific users and make users trust each other.
So how do we collect relevant data? There is an easy way. It&rsquo;s Facebook.</p>

<p>First, talk with your solicitor to add your Terms&amp;Conditions document that you are collecting data by using facebook.
Then make a big &ldquo;Login with Facebook&rdquo; button on your landing page. Don&rsquo;t forget to write that the user accepts the conditions
once the button clicked. Something like this:</p>

<p><img class="<a" src="href="http://dl.dropbox.com/u/47336405/Selection_044.png">http://dl.dropbox.com/u/47336405/Selection_044.png</a>"></p>

<p>Then you are ready to go. I use three gems to collect data:
omniauth, omniauth-facebook and koala. For config settings there is simple config and for caching data I use resque.
I know that using devise could be easier. But simply, its big.(I have omniauth-identity for nonfacebook logins)
So this will be different than devise&rsquo;s way.</p>

<p>Here we define our facebook app details. Sensitive data is stored on local.rb file and Simpleconfig serves them to environments. Checkout simpleconfig for details.</p>

<p>``` ruby config/settings/application.rb</p>

<p>SimpleConfig.for :application do
  group :facebook do</p>

<pre><code>set :namespace, 'FACEBOOK_NAMESPACE'
set :app_id, 'FACEBOOK_APP_ID'
set :app_secret, 'FACEBOOK_SECRET'
set :scope, 'email, publish_stream, user_birthday, user_about_me, user_education_history, user_interests, user_likes, user_religion_politics, user_work_history'
set :cache_expiry_time, 7.days
</code></pre>

<p>  end</p>

<p>```</p>

<p>Here are omniauth initialisation details. You can learn more about omniauth on it&rsquo;s github page.</p>

<p>``` ruby config/initialisers/omniauth.rb</p>

<p>OmniAuth.config.logger = Rails.logger
Rails.application.config.middleware.use OmniAuth::Builder do
  provider :facebook,</p>

<pre><code>APP_CONFIG.facebook.app_id,
APP_CONFIG.facebook.app_secret,
{ scope: APP_CONFIG.facebook.scope }
</code></pre>

<p>end</p>

<p>```</p>

<p>The haml view for our big facebook button.</p>

<p>``` haml views/pages/_facebook_login.html.haml</p>

<p>.hidden-phone
  = link_to auth_at_provider_path(provider: :facebook), class: &lsquo;btn btn-large btn-facebook&rsquo;, data: { :&ldquo;no-turbolink&rdquo; => true } do</p>

<pre><code>%i.icon-facebook-sign.icon-large
= t('login_with_facebook')
</code></pre>

<p>%p.signin-terms
  %b= t(&lsquo;we_will_never_post&rsquo;)
  %br= t(&lsquo;pages.home.signin_terms&rsquo;, appname: APP_CONFIG.app_name, terms_link: link_to(t(&lsquo;terms&rsquo;), :terms, :target=> &lsquo;<em>blank&rsquo;, data: { :&ldquo;no-turbolink&rdquo; => true }), policy_link: link_to(t(&lsquo;policy&rsquo;), :policy, :target=> &lsquo;</em>blank&rsquo;)).html_safe</p>

<p>```</p>

<p>Necassary routes to manage sessions</p>

<p>``` ruby config/routes.rb</p>

<p>  # Sessions
  resources :sessions, only: [:create, :destroy]</p>

<p>  get &lsquo;auth/:provider&rsquo;, to: &lsquo;sessions#new&rsquo;, as: :auth_at_provider
  get &lsquo;auth/:provider/callback&rsquo;, to: &lsquo;sessions#create&rsquo;
  get &lsquo;auth/failure&rsquo;, to: redirect(&lsquo;/&rsquo;)
  get &lsquo;signout&rsquo;, to: &lsquo;sessions#destroy&rsquo;, as: :logout</p>

<p>```</p>

<p>Here is the user model. Removed the nonrelevant fields. As you can see I&rsquo;m collecting enough data to make decisions.</p>

<p>``` ruby app/models/user.rb</p>

<p>class User
  include Mongoid::Document
  include ::Concerns::User::Authentication
  include ::Concerns::User::Facebook</p>

<p>  field :provider
  field :uid
  field :oauth_token
  field :oauth_expires_at
  field :facebook_permissions, type: Array, default: []
  field :facebook_friends, type: Array, default: []
  field :facebook_favorites, type: Array, default: []
  field :facebook_data_cached_at, type: DateTime, default: &lsquo;2014-01-01&rsquo;
  field :gender
  field :username
  field :bio
  field :languages, type: Array, default: []
  field :birthday, type: Date
  field :work, type: Hash, default: {}
  field :education, type: Hash, default: {}
  field :email
  field :name
  field :facebook_verified, type: Boolean, default: false</p>

<p>```</p>

<p>Here is the module for facebook authentication. This will collect facebook user data before saving the user.</p>

<p>``` ruby app/models/concerns/authentication.rb</p>

<p>module Concerns
  module User</p>

<pre><code>module Authentication
  extend ActiveSupport::Concern

  included do
    def set_fields_from_omniauth(auth)
      set_credentials auth.credentials
      set_info auth.info
      set_extra_raw_info auth.extra.raw_info
      set_extra_raw_info_special_permissions auth.extra.raw_info
      set_permissions
      Resque.enqueue(FacebookDataCacher, id)
    rescue Redis::CannotConnectError
    end

    private
    def set_credentials(credentials)
      self.oauth_token = credentials.token  
      self.oauth_expires_at =  Time.at credentials.expires_at || Time.now
    end

    def set_info(info)
      self.email = info.email
      self.name = info.name
      self.facebook_verified = info.verified || false
    end
    def set_extra_raw_info(raw_info)
      self.username = raw_info.username
      self.gender = raw_info.gender
      self.bio = raw_info.bio
      self.languages = raw_info.languages || {}
    end
    def set_extra_raw_info_special_permissions(raw_info)
      self.birthday = Date.strptime(raw_info.birthday, "%m/%d/%Y").at_midnight if raw_info.birthday
      self.work = raw_info.work || {}
      self.education = raw_info.education || {}
    end
    def set_permissions
      facebook do |fb|
        self.facebook_permissions = fb.get_connections('me', 'permissions')[0]
      end
    end
  end

  module ClassMethods
    def from_omniauth(auth)
      user = where(auth.slice(:provider, :uid)).first_or_initialize
      user.provider = auth.provider
      user.uid = auth.uid
      user.set_fields_from_omniauth auth
      user.save!
      user
    end
  end
end
</code></pre>

<p>  end
end</p>

<p>```
This module is for caching data. I&rsquo;m making resque collect more and more details.
We will run resque workers to get them.
You can also schedule the process with resque scheduler.
Checkout facebook graph api for more data to get.
And checkout resque gem for details.</p>

<p>``` ruby app/models/concerns/facebook.rb</p>

<p>module Concerns
  module User</p>

<pre><code>module Facebook
  extend ActiveSupport::Concern
  included do
    def facebook
      @facebook ||= Koala::Facebook::API.new(oauth_token)
      block_given? ? yield(@facebook) : @facebook
    rescue Koala::Facebook::APIError =&gt; e
      logger.info e.to_s
      nil 
    end

    def has_facebook_permission?(scope)
       facebook_permissions[scope.to_s].to_i == 1 if facebook_permissions?
    end

    def cache_facebook_data?
      favorites = %w(music books movies television games activities interests)  
      facebook do |fb|
        result = fb.batch do |batch_api|
          batch_api.get_connections('me', 'friends')
          favorites.each do |favorite|
            batch_api.get_connections('me', favorite)
          end
        end
        if result.any?
           self.facebook_friends = result[0] ? result[0] : []
          self.facebook_favorites = result[1] ? result[1..-1].flatten : []
          return true
        end
      end
      false
    end
  end

  module ClassMethods
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>We define a resque worker to cache facebook data.</p>

<p>``` ruby app/workers/facebook_data_cacher.rb
class FacebookDataCacher
  @queue = :facebook_cache_data_queue
  def self.perform(user_id)</p>

<pre><code>user = User.find user_id
if user.facebook_data_cached_at &lt; APP_CONFIG.facebook.cache_expiry_time.ago.utc
  if user.cache_facebook_data?
    user.update_attribute :facebook_data_cached_at, Time.now.utc
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Here we go. The code above will get us the data we defined on our model and it will be updating and adding more data when user logins.
Now it&rsquo;s time to make decisions!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Activity Cal-heatmap Using Public_activity and Mongoid]]></title>
    <link href="http://canercak.github.io/blog/2013/08/02/creating-activity-cal-heatmap-using-public-activity-and-mongoid/"/>
    <updated>2013-08-02T16:52:00+03:00</updated>
    <id>http://canercak.github.io/blog/2013/08/02/creating-activity-cal-heatmap-using-public-activity-and-mongoid</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://dl.dropbox.com/u/47336405/Selection_043.png">http://dl.dropbox.com/u/47336405/Selection_043.png</a>" title="" ></p>

<p>I had to present activites of a service provider to it&rsquo;s users in a unique way.
First thought of creating an activity stream but knew that the users won&rsquo;t be
reading them since the activity would be about the services of the provider- not something &ldquo;social&rdquo;.
Then thought of creating a line graph that shows the days and works done by the provider. It wouldn&rsquo;t be unique though.
I thought and thought by looking at my github dashboard and idea came up. I always liked Github&rsquo;s collaboration heatmap.
It was unique and concise. So I decided to create my own activity heatmap.</p>

<p>I needed to sort out three things in order to make it happen.</p>

<p>Finding out a github-like heatmap to present activities
Logging provider activites in a way that I can present on map
Making mongoid and Rails 4 work with heatmap and activity logs.</p>

<p>Here is how I created my activity heatmap:</p>

<p>Kamisama has done great job on creating cal-heatmaps. Its obvious that github uses his work too. You can find his work on
<a href="https://github.com/kamisama/cal-heatmap.">https://github.com/kamisama/cal-heatmap.</a> You have to download cal-heatmap.js, d3.js and for localisation; moment.js does great job.
I had to present three activites to user;</p>

<p>When provider gets selected by user.
When provider returns to quote
When provider does the work</p>

<p>You cannot divide the activities to parts in cal-heatmap.
You provide timestamps with numeric values and cal-heatmap shows the data.
So I first had to fetch these three activities, count them and show them on map.
Then I would present the details once the user clicks on a cell.
So &ldquo;get_provider_counts&rdquo; counts the data in a way cal-heatmap understands,
&ldquo;get_activity gets&rdquo; the data once I click on a cell.</p>

<p>``` coffeescript providers.js.coffee</p>

<p>initProviderShow = &ndash;>
  $.ajax(</p>

<pre><code>url: "/activities/get_provider_counts"
type: "GET"
data:
  id: $("#provider_id").val()
dataType: "json"
).success (data) -&gt; 
moment.lang "en"
calendar = new CalHeatMap()
calendar.init
  itemSelector: "#calheat"
  data: data
  start: new Date(2014, 1)
  domain: "month"
  subDomain: "day"
  range: 7
  cellSize: 15
  cellPadding: 5
  domainGutter: 20
  displayScale: false
  previousSelector: "#calheat-PreviousDomain-selector"
  nextSelector: "#calheat-NextDomain-selector"
  domainLabelFormat: (date) -&gt;
    moment(date).format("MMMM")
  subDomainDateFormat: (date) -&gt;
    moment(date).format "LL"
  subDomainTitleFormat:
    empty: "{date} +I18n.t "shared.navbar.no_activites"
    filled: "{date}  {count} +I18n.t "shared.navbar.has_activites"
  onClick: (date) -&gt;
    $.ajax
      type: "GET"
      url: "/activities/get_activity"
      data: { id: $("#provider_id").val(), selected: date}
      success: (data) -&gt;
        text1= ""
        text2 =""
        text3 = ""
        if data.selected &gt; 0
          text1 = data.selected + " " +I18n.t "shared.navbar.selected
        if data.returned &gt; 0
          text2 = data.returned + " " +I18n.t "shared.navbar.returned
        if data.done &gt; 0
          text3 = data.done + " " + I18n.t "shared.navbar.done"
        if text1.length &gt; 0 || text2.length &gt; 0 || text3.length &gt; 0
          $("#onClick-placeholder").html text1 + "&lt;br/&gt;" + text2 + "&lt;br/&gt;" + text3
          $("#onClick-placeholder").show()
        else
          $("#onClick-placeholder").html ""
          $("#onClick-placeholder").hide()              
      error: (data) -&gt;
          return
    return
  legend: [
    1
    3
    5
  ]
  legendColors: [
    "#ecf5e2"
    "#232181"
  ]
</code></pre>

<p>  return
```</p>

<p>I was about to store provider activities myself but then found a great gem to sort it out.
Its public_activity gem. <a href="https://github.com/pokonski/public_activity">https://github.com/pokonski/public_activity</a>
It&rsquo;s quote comprehensve and does support mongoid and Rails 4.</p>

<p>The system I&rsquo;m working on is about User creating quotes to providers.
For every quote user selects up to three providers. Provider &ldquo;returns&rdquo; back to quote and
if agrees with user, provider &ldquo;does&rdquo; the work.
So I&rsquo;m tracking the user, relation to providers collection, returned providers and providerdone.</p>

<p>``` ruby Quote.rb
require &lsquo;autoinc&rsquo;
class Quote
  include Mongoid::Document
  include Mongoid::Timestamps
  include Mongoid::Paranoia
  include Mongoid::Slug
  include Mongoid::Autoinc
  include Geocoder::Model::Mongoid
  include Concerns::GmapRoute
  include PublicActivity::Model
  tracked :owner => :user
  tracked :params => {</p>

<pre><code>  :returned_providers =&gt; :returned_providers,
  :providerdone =&gt; :providerdone,
  :providers =&gt; :provider_ids  
</code></pre>

<p>  }
```</p>

<p>I created a controller to store activities. Our system does not have activity streams
so this will be useful for new features too.
These two methods are for ajax requests I explained above.</p>

<p>``` ruby activities_controller.rb
def get_provider_counts</p>

<pre><code>@provider = Provider.find(params[:id])
@activities = PublicActivity::Activity.all 
selected_providers =@activities.where("parameters.providers"=&gt;@provider._id,"key"=&gt;"quote.create").group_by {|d| d.created_at.to_i}
returned_providers =@activities.where("parameters.returned_providers"=&gt;"#{@provider._id}","key"=&gt;"quote.update").group_by {|d| d.created_at.to_i}
done_providers =@activities.where("parameters.providerdone"=&gt;"#{@provider._id}","key"=&gt;"quote.update").group_by {|d| d.created_at.to_i}
@caldata = {}
seldata = {}
retdata ={}
donedata = {}
selected_providers.each do |provider|
  seldata = {"#{provider[0]}" =&gt; provider[1].count}
end
returned_providers.each do |provider|
  retdata = {"#{provider[0]}" =&gt; provider[1].count}
end
done_providers.each do |provider|
  donedata = {"#{provider[0]}" =&gt; provider[1].count}
end    
@caldata = donedata.merge(retdata) {|key, oldval, newval| newval + oldval}
@caldata = @caldata.merge(seldata) {|key, oldval, newval| newval + oldval}
respond_to do |format|
  format.json  { render :json =&gt; @caldata.to_json}
end
</code></pre>

<p>  end</p>

<p>  def get_activity</p>

<pre><code>@provider = Provider.find(params[:id])
date = Date.parse(params[:selected])
@activities = PublicActivity::Activity.all 
selected_providers =@activities.where("parameters.providers"=&gt;@provider._id,:created_at=&gt;date.beginning_of_day..date.end_of_day, "key"=&gt;"quote.create")
returned_providers =@activities.where("parameters.returned_providers"=&gt;"#{@provider._id}",:created_at=&gt;date.beginning_of_day..date.end_of_day,"key"=&gt;"quote.update") 
done_providers =@activities.where("parameters.providerdone"=&gt;"#{@provider._id}",:created_at=&gt;date.beginning_of_day..date.end_of_day,"key"=&gt;"quote.update") 
respond_to do |format|
  format.json  { render :json =&gt; {:selected=&gt; selected_providers.count,:returned =&gt;returned_providers.count,:done=&gt;done_providers.count}}
end
</code></pre>

<p>  end
```
Finally the view to show cal-heatmap</p>

<p>``` haml providers/show.html.haml</p>

<p>%div
  #calheat{style: &ldquo;position:relative;&rdquo;}
  %p
  %button#calheat-PreviousDomain-selector.btn.btn-mini</p>

<pre><code>%i.icon.icon-chevron-left
</code></pre>

<p>  %button#calheat-NextDomain-selector.btn.btn-mini</p>

<pre><code>%i.icon.icon-chevron-right
</code></pre>

<p>  %h5{style:&ldquo;text-align: center;margin-top: -10px;&rdquo;}</p>

<pre><code>#onClick-placeholder
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Factor Authentication Using Active_model_otp With Mongoid]]></title>
    <link href="http://canercak.github.io/blog/2011/07/03/two-factor-authentication-using-active-model-otp-with-mongoid/"/>
    <updated>2011-07-03T05:59:00+03:00</updated>
    <id>http://canercak.github.io/blog/2011/07/03/two-factor-authentication-using-active-model-otp-with-mongoid</id>
    <content type="html"><![CDATA[<p>I had to implement two factor authentication using a custom sms provider.
Active model OTP really helped me in generating one time use tokens.
I thought it won&rsquo;t be working with mongoid but it was easy to integrate it.
Another issue was to make user authenticated on the same page.
We just didn&rsquo;t want to direct user to another page for phone verification.
So I&rsquo;ve written some js to sort it out. It&rsquo;s a bit &ldquo;manual&rdquo; because clientsidevalidations caused problems in Rails4.
Everything gets validated both on client and server side.
Here you can see relevant parts from the code.</p>

<p><div><script src='https://gist.github.com/9946621.js'></script>
<noscript><pre><code>def check_verification_code
      data = {:result =&gt; false}
      if current_user.authenticate_otp(params[:verification_code], drift: 200) #drift enough for old users 
        data = {:result =&gt; true}
        session[:mobile_verified] = true
      end
      respond_to do |format|
        format.json  { render :json =&gt; data} 
      end
    end


    def sendverification
      data = {:result =&gt; false} 
      phone = validate_phone(params[:verification_phone])
      if phone.present?
        sms = Sms.new       
        if sms.send_sms([phone],APP_CONFIG.sms_from, t(&#39;verification_message&#39;) + current_user.otp_code.to_s)
          data = {:result =&gt; true} 
        end
      end
      respond_to do |format|
        format.json  { render :json =&gt; data} 
      end
    end


</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
