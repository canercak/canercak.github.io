<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Two Factor Authentication | My Octopress Blog]]></title>
  <link href="http://canercak.github.io/blog/categories/two-factor-authentication/atom.xml" rel="self"/>
  <link href="http://canercak.github.io/"/>
  <updated>2014-04-03T04:36:33+03:00</updated>
  <id>http://canercak.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Two Factor Authentication Using Active_model_otp With Mongoid]]></title>
    <link href="http://canercak.github.io/blog/2011/07/03/two-factor-authentication-using-active-model-otp-with-mongoid/"/>
    <updated>2011-07-03T05:59:00+03:00</updated>
    <id>http://canercak.github.io/blog/2011/07/03/two-factor-authentication-using-active-model-otp-with-mongoid</id>
    <content type="html"><![CDATA[<p>I had to implement two factor authentication using a custom sms provider.
Active model OTP really helped me in generating one time use tokens.
I thought it won&rsquo;t be working with mongoid but it was easy to integrate it.
Another issue was to make user authenticated on the same page.
We just didn&rsquo;t want to direct user to another page for phone verification.
So I&rsquo;ve written some js to sort it out. It&rsquo;s a bit &ldquo;manual&rdquo; because clientsidevalidations caused problems in Rails4.
Everything gets validated both on client and server side.
Here you can see relevant parts from the code.</p>

<p><div><script src='https://gist.github.com/9946621.js'></script>
<noscript><pre><code>def check_verification_code
      data = {:result =&gt; false}
      if current_user.authenticate_otp(params[:verification_code], drift: 200) #drift enough for old users 
        data = {:result =&gt; true}
        session[:mobile_verified] = true
      end
      respond_to do |format|
        format.json  { render :json =&gt; data} 
      end
    end


    def sendverification
      data = {:result =&gt; false} 
      phone = validate_phone(params[:verification_phone])
      if phone.present?
        sms = Sms.new       
        if sms.send_sms([phone],APP_CONFIG.sms_from, t(&#39;verification_message&#39;) + current_user.otp_code.to_s)
          data = {:result =&gt; true} 
        end
      end
      respond_to do |format|
        format.json  { render :json =&gt; data} 
      end
    end


</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
